{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Project Calzone","text":"<p>There's not much here yet!</p> <p>Use the site navigation to browse for more information.</p> <p>This website gets updated when needed, we are working on a way to automate it</p>"},{"location":"about/","title":"About Project Calzone","text":"<p>Project Calzone is a prototype federated social VR platform. It's purpose is to enable more ethical and human-centered social vr experiences.</p> <p>Project Calzone takes great inspiration from the Fediverse and aims to inevitably join it. </p>"},{"location":"about/#a-breif-introduction-to-the-fediverse","title":"A breif Introduction to the Fediverse","text":"<p>The Fediverse is a global network if independent social media platforms, that enable seemless interoperability accross multiple websites. Users of one website can communicate and coexist with eachother, even if one or the other are on completely different types of platforms. </p> <p>All of these website know how to communicate with eachother over well defined public standards. By using public standards, platforms completely different from each other can coexist, allowing users of both to communicate.</p> <p>If all of this seems far-fetched, the global Email networks are already operating like this. </p>"},{"location":"about/#project-calzone-is-a-two-fold-project","title":"Project Calzone is a two-fold Project","text":"<p>The whole of Project Calzone exists as two separate project working in tandem:</p> <ul> <li>Project Calzone Game is a Godot 4 based game client. This is the game that Project Calzone users actually download and run.</li> <li>Project Calzone Web is an ExpressJS based REST API that handles the game client's login, session management, friends-lists, and federation needs. </li> </ul>"},{"location":"about/#project-philosophy","title":"Project Philosophy","text":"<p>These guidelines define  1. Users need not understand the inner workings of the software in order to be able to use it. 2. The software should provide explanation when something goes wrong. 3. The project should be as self contained as possible and avoid using tools and libraries that unnessecarily complicate it's maintanance and use. 4. No update shall be released without reasonable effort to update official documentation beforehand. Documentation updates should be considered a core part of maintaining the software. 5. The project should prioritize open source or otherwise freely distributable libraries over proprietary ones. 6. If a paid or proprietary library must be used, then if at all possible; the project should be organized as to not tie itself to one proprietary product.</p>"},{"location":"game/","title":"Calzone Game","text":""},{"location":"game/building-from-source/","title":"Building From Source","text":"<p>We try to make building from source as easy and intuitive as possible for developers of all skill levels. Care is being taken to avoid overly complicated or proprietary design project design choices, only using high-skill tools when they are absolutely nesseccary. As a result, building the client from source is almost as effortless as running one of the many Godot sample projects.</p> <p>To build from source, make sure you have installed the latest stable version 4.1 or higher build of GodotEngine.</p> <p>Next, download or git clone a copy of the game client's repository. (As of writing, the game is still undergoing heavy development; there are no \"stable\" class builds.)</p> <p>Finally, simply open the project using the reccommended version.</p>"},{"location":"web/","title":"Calzone Web","text":""},{"location":"web/REST%20API%20Quick%20Reference/","title":"REST API Quick Reference","text":"<p>A quick reference guide to all the REST API calls currently available.</p>"},{"location":"web/REST%20API%20Quick%20Reference/#world-map-mock-up","title":"World Map (Mock-up)","text":"<ul> <li>GET <code>/worldmap</code> Returns the current instance World Map as a JSON object.</li> </ul>"},{"location":"web/REST%20API%20Quick%20Reference/#sessions","title":"Sessions","text":"<p>Important Note: The session list is being constantly maintained, but maintained each time it needs to be accessed. Routes that retrieve a list of sessions will also trigger a purge of stale/abandoned sessions from the list itself, even if those entries were not requested.</p> <ul> <li>GET <code>/sessions</code> Returns a sanitized list of the currently running game sessions. Causes a list refresh.</li> <li> <p>POST <code>/registersession</code> Accepts self-reported metadata about a session from a user on this instance. </p> <p>Requires: <code>hostusername</code>, <code>hostIPv4</code>, <code>worldID</code>, <code>visibility</code></p> <p>Returns: <code>checkIn</code>, <code>sessionID</code>, <code>sessionOwnerKey</code>, <code>sessionKeepAliveTime</code></p> </li> <li> <p>POST <code>/checkinsession</code> Used by a session host to keep their session listing alive. </p> <p>Requires: <code>sessionID</code>, <code>sessionOwnerKey</code></p> </li> <li> <p>POST <code>/closesession</code> Used by a session host to manually remove their session. It's exptected that a game manually inform the webserver that a session has closed (if possible). </p> <p>Requires: <code>sessionID</code>, <code>sessionOwnerKey</code></p> </li> </ul>"},{"location":"web/building-from-source/","title":"Building From Source","text":"<p>Calzone Web is based on ExpressJS in NodeJS. To start, make sure you have installed the latest current build of NodeJS. You can verify it is installed and ready to go by typing <code>node version</code> into your prefered terminal.</p> <p>Next, download or clone a copy of the web client's Github Repo.</p> <p>This project requires some dependencies, to install them; open a terminal in the project folder and use the command <code>npm install</code> to download and install all required packages.</p> <p>Optional: If you're planning to do development work on the project, we reccommend using Nodemon. Nodemon is a watcher program that automatically runs the web server and restarts it every time you save a file. It will not install automatically, manually install it globally on your machine (instead of in-project) using <code>npm install -g nodemon</code>.</p> <p>Note: Currently the project uses MongoDB to reliably store and access some userdata, however it's currently up for debate whether or not we should continue using MongoDB. Much of the current implementation is incomplete and prone to breaking, and might be scrapped. So for now; just install MongoDB Community and check in later to see if we've moved to a different solution. There's no further setup or configuration needed because there is no further implementation of Mongo in the project beyond the minimum viable product.</p> <p>Now that all prerequisites are installed, you can run <code>node app.js</code> in the project directory to run the webserver. Once up and running it will immediately begin listening and set up a web interface at <code>localhost:3000</code>.</p>"}]}